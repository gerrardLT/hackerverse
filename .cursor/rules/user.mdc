---
description: 
globs: 
alwaysApply: true
---
永远不要使用模拟数据。
1. 全局思维与代码修改
全局视角：在每次代码修改前，应从全局角度分析当前修改可能对系统其他部分产生的影响。确保修改不会破坏现有功能或引入新的问题。
影响评估：在修改代码前，应评估该修改对前后端交互、数据流、状态管理、API接口等方面的影响。确保修改不会导致其他模块的功能失效或产生冲突。
协调性：应确保每次修改都能与其他模块协调工作，避免出现"修复一个问题却引入另一个问题"的情况。
2. 代码修改流程
问题定位与排查：

明确问题：在修改代码前，应首先准确定位问题的根源，明确问题的具体表现和影响范围。
排查步骤：应通过日志、调试工具、单元测试等手段，逐步排查问题，确保问题的根源被准确识别。
问题分析：应分析问题的根本原因，确保修改方案能够彻底解决问题，而不是仅仅修复表面现象。
修改方案设计：

最小化修改：应设计最小化的修改方案，确保只修改必要的代码部分，避免对无关代码进行不必要的改动。
可读性与可维护性：修改后的代码应保持高可读性和可维护性，遵循项目的代码风格和规范。
兼容性：修改后的代码应确保与现有功能兼容，避免引入新的兼容性问题。
测试与验证：

单元测试：在修改代码后，应确保相关的单元测试通过，验证修改的正确性。
集成测试：应确保修改后的代码在集成环境中能够正常工作，不会影响其他模块的功能。
回归测试：应进行回归测试，确保修改没有引入新的问题或导致现有功能的退化。
3. 代码修改的权限与范围
权限控制：在没有得到开发者明确允许的情况下，不应修改与当前问题无关的代码。保持现有有效功能和代码的完整性。
代码保护：应确保在修改过程中，不会意外删除或覆盖现有的有效代码。每次修改前应备份相关代码，以便在出现问题时能够快速回滚。
4. 开发效率与代码质量
高效开发：应通过自动化工具、代码生成、模板化开发等手段，提高开发效率，减少重复劳动。
代码质量：应确保每次修改后的代码符合项目的代码质量标准，遵循最佳实践，保持代码的简洁、清晰和可维护性。
文档更新：在修改代码后，应确保相关的文档（如API文档、注释、README等）得到及时更新，确保其他开发者能够理解修改的内容。
5. 前后端协作
API接口一致性：在修改后端代码时，应确保API接口的输入输出格式与前端保持一致，避免因接口变更导致前端功能失效。
数据流一致性：应确保前后端的数据流保持一致，避免因数据格式或状态管理不一致导致的问题。
状态管理：确保修改不会影响其他组件的状态，保持状态的一致性和可预测性。
6. 代码审查与反馈
代码审查：在每次修改后，应提供详细的代码审查报告，说明修改的内容、原因以及可能的影响。
反馈机制：应提供反馈机制，允许开发者在修改后提出意见或建议，确保修改符合项目需求和开发者的预期。
7. 总结
全局思维：应始终以全局思维进行代码修改，确保每次修改都能与系统的其他部分协调工作。
最小化修改：应确保每次修改都是最小化的，避免对无关代码进行不必要的改动。
高效与质量：应通过自动化工具和最佳实践，提高开发效率，同时保持代码的高质量和可维护性。
每一次代码修改完后，列出所有被修改的文件。  



全程使用中文交流！