generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public", "hackathon_schema"]
}

// 枚举类型定义
enum UserRole {
  USER
  ADMIN
  MODERATOR
  JUDGE

  @@schema("hackathon_schema")
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  BANNED
  PENDING

  @@schema("hackathon_schema")
}

enum HackathonStatus {
  DRAFT
  ACTIVE
  COMPLETED
  CANCELLED

  @@schema("hackathon_schema")
}

enum ProjectStatus {
  DRAFT
  SUBMITTED
  REVIEWED
  WINNER
  REJECTED

  @@schema("hackathon_schema")
}

enum ParticipationStatus {
  REGISTERED
  CONFIRMED
  SUBMITTED
  CANCELLED
  COMPLETED

  @@schema("hackathon_schema")
}

enum TeamApplicationStatus {
  PENDING   // 待审核
  APPROVED  // 已通过
  REJECTED  // 已拒绝
  CANCELLED // 已取消

  @@schema("hackathon_schema")
}

enum TeamStatus {
  RECRUITING // 招募中
  FULL       // 已满员
  COMPETING  // 比赛中
  COMPLETED  // 已完成
  DISBANDED  // 已解散

  @@schema("hackathon_schema")
}

enum NotificationType {
  // 团队相关
  TEAM_INVITE                 // 团队邀请
  TEAM_APPLICATION_APPROVED   // 申请被批准
  TEAM_APPLICATION_REJECTED   // 申请被拒绝
  TEAM_MEMBER_JOINED         // 新成员加入
  TEAM_STATUS_CHANGED        // 团队状态变更
  
  // 黑客松相关
  HACKATHON_STARTING         // 黑客松即将开始
  HACKATHON_STARTED          // 黑客松已开始
  HACKATHON_ENDING           // 黑客松即将结束
  HACKATHON_ENDED            // 黑客松已结束
  HACKATHON_REGISTRATION_REMINDER // 报名提醒
  HACKATHON_SUBMISSION_REMINDER   // 提交提醒
  HACKATHON_RESULTS_ANNOUNCED     // 结果公布
  
  // 项目相关
  PROJECT_LIKED              // 项目被点赞
  PROJECT_COMMENTED          // 项目收到评论
  PROJECT_REVIEWED           // 项目被评审
  PROJECT_STATUS_CHANGED     // 项目状态变更
  PRIZE_AWARDED              // 获奖通知
  
  // 社区相关
  COMMUNITY_POST_REPLIED     // 帖子被回复
  COMMUNITY_POST_LIKED       // 帖子被点赞
  COMMUNITY_REPLY_LIKED      // 回复被点赞
  COMMUNITY_NEW_FOLLOWER     // 新关注者
  COMMUNITY_FOLLOWER_POST    // 关注者发帖
  
  // 系统相关
  SYSTEM_ANNOUNCEMENT        // 系统公告
  SYSTEM_MAINTENANCE         // 系统维护
  SECURITY_ALERT             // 安全提醒
  FEATURE_UPDATE             // 功能更新
  WELCOME_MESSAGE            // 欢迎消息

  @@schema("hackathon_schema")
}

enum NotificationPriority {
  URGENT  // 紧急 - 需要立即处理
  HIGH    // 重要 - 需要及时处理
  MEDIUM  // 普通 - 一般提醒
  LOW     // 低级 - 信息提示

  @@schema("hackathon_schema")
}

enum NotificationCategory {
  TEAM      // 团队
  HACKATHON // 黑客松
  PROJECT   // 项目
  COMMUNITY // 社区
  SYSTEM    // 系统

  @@schema("hackathon_schema")
}

enum DAOProposalStatus {
  ACTIVE
  PASSED
  REJECTED
  EXECUTED
  EXPIRED

  @@schema("hackathon_schema")
}

enum DAOProposalType {
  TREASURY
  GOVERNANCE
  PROTOCOL
  EMERGENCY

  @@schema("hackathon_schema")
}

enum StakingTier {
  BRONZE
  SILVER
  GOLD
  PLATINUM

  @@schema("hackathon_schema")
}

enum StakingTransactionType {
  STAKE
  UNSTAKE
  CLAIM_REWARD
  COMPOUND
  EMERGENCY_UNLOCK

  @@schema("hackathon_schema")
}

enum StakingTransactionStatus {
  PENDING
  CONFIRMED
  FAILED

  @@schema("hackathon_schema")
}

model User {
  id                   String               @id @default(cuid())
  email                String               @unique
  username             String?              @unique
  password             String?
  avatarUrl            String?
  bio                  String?
  skills               Json                 @default("[]")
  walletAddress        String?              @unique
  reputationScore      Int                  @default(0)
  ipfsProfileHash      String?
  socialLinks          Json?
  privacySettings      Json                 @default("{}")
  notificationSettings Json                 @default("{}")
  preferences          Json                 @default("{}")
  emailVerified        Boolean              @default(false)
  role                 UserRole             @default(USER)
  status               UserStatus           @default(ACTIVE)
  lastLoginAt          DateTime?
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  lastBlockNumber      BigInt?
  lastGasUsed          BigInt?
  lastTxHash           String?
  profileSyncStatus    String               @default("PENDING")
  encryptedProfile     Json?                // 加密的敏感信息
  publicKey            String?              // 用户公钥
  dataConsent          Json                 @default("{}") // 数据使用同意记录
  communityPosts       CommunityPost[]      @relation("CommunityPosts")
  communityReplies     CommunityReply[]     @relation("CommunityReplies")
  postLikes            PostLike[]           @relation("PostLikes")
  replyLikes           ReplyLike[]          @relation("ReplyLikes")
  postBookmarks        PostBookmark[]       @relation("PostBookmarks")
  following            UserFollow[]         @relation("UserFollowing")
  followers            UserFollow[]         @relation("UserFollowers")
  communityNotifications CommunityNotification[] @relation("UserNotifications")
  triggeredNotifications CommunityNotification[] @relation("TriggeredNotifications")
  daoProposals         DAOProposal[]        @relation("DAOProposalCreator")
  daoVotes             DAOVote[]
  reputationRecords    ReputationRecord[]   @relation("UserReputation")
  votingDelegations    VotingDelegation[]   @relation("Delegator")
  delegatedVotes       VotingDelegation[]   @relation("Delegatee")
  communityIncentives  CommunityIncentive[] @relation("IncentiveUser")
  didCredentials       DIDCredential[]      @relation("UserDID")
  feedback             Feedback[]
  organizedHackathons  Hackathon[]          @relation("Organizer")
  judgeRoles           Judge[]
  nfts                 NFT[]                @relation("NFTOwner")
  notifications        Notification[]
  participations       Participation[]
  projectLikes         ProjectLike[]
  projects             Project[]
  staking              Staking?
  stakingTransactions  StakingTransaction[]
  teamMemberships      TeamMember[]
  ledTeams             Team[]               @relation("TeamLeader")
  teamApplications     TeamApplication[]
  reviewedApplications TeamApplication[]    @relation("TeamApplicationReviewer")

  @@map("users")
  @@schema("hackathon_schema")
}

model Hackathon {
  id                   String           @id @default(cuid())
  title                String
  description          String?
  startDate            DateTime
  endDate              DateTime
  registrationStartDate DateTime?
  registrationDeadline DateTime?
  maxParticipants      Int?
  prizePool            Decimal?        @db.Decimal(15, 2)
  categories           Json            @default("[]")
  tags                 Json            @default("[]")
  requirements         String?
  rules                String?
  isPublic             Boolean         @default(true)
  featured             Boolean         @default(false)
  status               HackathonStatus @default(DRAFT)
  organizerId          String
  ipfsHash             String?
  metadata             Json?
  prizes               Json?
  tracks               Json?
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  blockNumber          BigInt?
  contractId           Int?
  gasUsed              BigInt?
  syncStatus           String          @default("PENDING")
  txHash               String?
  organizer            User            @relation("Organizer", fields: [organizerId], references: [id])
  judges               Judge[]
  participations       Participation[]
  projects             Project[]
  teams                Team[]

  @@map("hackathons")
  @@schema("hackathon_schema")
}

model Project {
  id              String        @id @default(cuid())
  title           String
  description     String?
  hackathonId     String
  teamId          String?
  creatorId       String
  technologies    Json          @default("[]")
  tags            Json          @default("[]")
  githubUrl       String?
  demoUrl         String?
  videoUrl        String?
  presentationUrl String?
  ipfsHash        String?
  status          ProjectStatus @default(DRAFT)
  isPublic        Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  blockNumber     BigInt?
  contractId      Int?
  gasUsed         BigInt?
  syncStatus      String        @default("PENDING")
  txHash          String?
  feedback        Feedback[]
  projectLikes    ProjectLike[]
  creator         User          @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  hackathon       Hackathon     @relation(fields: [hackathonId], references: [id], onDelete: Cascade)
  team            Team?         @relation(fields: [teamId], references: [id])
  scores          Score[]

  @@map("projects")
  @@schema("hackathon_schema")
}

model Team {
  id          String     @id @default(cuid())
  name        String
  description String?
  hackathonId String
  leaderId    String
  maxMembers  Int        @default(5)
  skills      Json       @default("[]")
  tags        Json       @default("[]")
  isPublic    Boolean    @default(true)
  status      TeamStatus @default(RECRUITING)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  projects     Project[]
  members      TeamMember[]
  applications TeamApplication[]
  hackathon    Hackathon    @relation(fields: [hackathonId], references: [id], onDelete: Cascade)
  leader       User         @relation("TeamLeader", fields: [leaderId], references: [id])

  @@map("teams")
  @@schema("hackathon_schema")
}

model TeamMember {
  id       String   @id @default(cuid())
  teamId   String
  userId   String
  role     String   @default("member")
  joinedAt DateTime @default(now())
  team     Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@map("team_members")
  @@schema("hackathon_schema")
}

model TeamApplication {
  id          String                @id @default(cuid())
  teamId      String
  userId      String
  message     String?               // 申请理由
  skills      Json                  @default("[]") // 申请者的技能
  status      TeamApplicationStatus @default(PENDING)
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  reviewedAt  DateTime?
  reviewedBy  String?               // 审批人ID
  
  team        Team                  @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user        User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviewer    User?                 @relation("TeamApplicationReviewer", fields: [reviewedBy], references: [id])

  @@unique([teamId, userId]) // 防止重复申请
  @@map("team_applications")
  @@schema("hackathon_schema")
}

model Participation {
  id          String              @id @default(cuid())
  hackathonId String
  userId      String
  status      ParticipationStatus @default(REGISTERED)
  joinedAt    DateTime            @default(now())
  hackathon   Hackathon           @relation(fields: [hackathonId], references: [id], onDelete: Cascade)
  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([hackathonId, userId])
  @@map("participations")
  @@schema("hackathon_schema")
}

model Judge {
  id               String    @id @default(cuid())
  hackathonId      String
  userId           String
  role             String    @default("main")
  expertise        Json      @default("[]")
  assignedProjects Json      @default("[]")
  createdAt        DateTime  @default(now())
  hackathon        Hackathon @relation(fields: [hackathonId], references: [id], onDelete: Cascade)
  user             User      @relation(fields: [userId], references: [id])
  scores           Score[]

  @@map("judges")
  @@schema("hackathon_schema")
}

model Score {
  id                  String   @id @default(cuid())
  projectId           String
  judgeId             String
  innovation          Decimal? @db.Decimal(3, 1)
  technicalComplexity Decimal? @db.Decimal(3, 1)
  userExperience      Decimal? @db.Decimal(3, 1)
  businessPotential   Decimal? @db.Decimal(3, 1)
  presentation        Decimal? @db.Decimal(3, 1)
  totalScore          Decimal? @db.Decimal(4, 1)
  comments            String?
  ipfsHash            String?
  createdAt           DateTime @default(now())
  blockNumber         BigInt?
  gasUsed             BigInt?
  syncStatus          String   @default("PENDING")
  txHash              String?
  judge               Judge    @relation(fields: [judgeId], references: [id], onDelete: Cascade)
  project             Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("scores")
  @@schema("hackathon_schema")
}

model Feedback {
  id         String   @id @default(cuid())
  projectId  String
  userId     String
  rating     Int
  comment    String?
  ipfsHash   String?
  createdAt  DateTime @default(now())
  syncStatus String   @default("PENDING")
  txHash     String?
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("feedbacks")
  @@schema("hackathon_schema")
}

model ProjectLike {
  id         String   @id @default(cuid())
  projectId  String
  userId     String
  ipfsHash   String?
  createdAt  DateTime @default(now())
  syncStatus String   @default("PENDING")
  txHash     String?
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@map("project_likes")
  @@schema("hackathon_schema")
}

model Notification {
  id          String              @id @default(cuid())
  type        NotificationType
  title       String
  message     String
  data        Json?
  read        Boolean             @default(false)
  priority    NotificationPriority @default(MEDIUM)
  category    NotificationCategory @default(SYSTEM)
  actionUrl   String?             // 点击跳转的URL
  actionLabel String?             // 操作按钮文本
  expiresAt   DateTime?           // 过期时间
  userId      String
  createdAt   DateTime            @default(now())
  readAt      DateTime?           // 已读时间
  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, read, createdAt])
  @@index([userId, category, createdAt])
  @@map("notifications")
  @@schema("hackathon_schema")
}

model CommunityPost {
  id               String           @id @default(cuid())
  title            String
  content          String
  excerpt          String?
  category         String           @default("general")
  tags             Json             @default("[]")
  authorId         String
  views            Int              @default(0)
  likes            Int              @default(0)
  replies          Int              @default(0)
  isPinned         Boolean          @default(false)
  isLocked         Boolean          @default(false)
  isDeleted        Boolean          @default(false)
  lastReplyAt      DateTime?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  author           User             @relation("CommunityPosts", fields: [authorId], references: [id], onDelete: Cascade)
  communityReplies CommunityReply[]
  postLikes        PostLike[]       @relation("PostLikes")
  postBookmarks    PostBookmark[]   @relation("PostBookmarks")

  @@map("community_posts")
  @@schema("hackathon_schema")
}

model CommunityReply {
  id        String           @id @default(cuid())
  postId    String
  content   String
  authorId  String
  parentId  String?
  likes     Int              @default(0)
  isDeleted Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  author    User             @relation("CommunityReplies", fields: [authorId], references: [id], onDelete: Cascade)
  parent    CommunityReply?  @relation("ReplyReplies", fields: [parentId], references: [id])
  replies   CommunityReply[] @relation("ReplyReplies")
  post      CommunityPost    @relation(fields: [postId], references: [id], onDelete: Cascade)
  replyLikes ReplyLike[]     @relation("ReplyLikes")

  @@map("community_replies")
  @@schema("hackathon_schema")
}

model PostLike {
  id     String @id @default(cuid())
  userId String
  postId String
  createdAt DateTime @default(now())
  
  user User          @relation("PostLikes", fields: [userId], references: [id], onDelete: Cascade)
  post CommunityPost @relation("PostLikes", fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("post_likes")
  @@schema("hackathon_schema")
}

model ReplyLike {
  id      String @id @default(cuid())
  userId  String
  replyId String
  createdAt DateTime @default(now())
  
  user  User           @relation("ReplyLikes", fields: [userId], references: [id], onDelete: Cascade)
  reply CommunityReply @relation("ReplyLikes", fields: [replyId], references: [id], onDelete: Cascade)

  @@unique([userId, replyId])
  @@map("reply_likes")
  @@schema("hackathon_schema")
}

model PostBookmark {
  id     String @id @default(cuid())
  userId String
  postId String
  createdAt DateTime @default(now())
  
  user User          @relation("PostBookmarks", fields: [userId], references: [id], onDelete: Cascade)
  post CommunityPost @relation("PostBookmarks", fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("post_bookmarks")
  @@schema("hackathon_schema")
}

model UserFollow {
  id         String @id @default(cuid())
  followerId String
  followingId String
  createdAt  DateTime @default(now())
  
  follower  User @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("user_follows")
  @@schema("hackathon_schema")
}

model CommunityNotification {
  id           String                     @id @default(cuid())
  userId       String                     // 接收通知的用户
  type         CommunityNotificationType
  title        String
  content      String
  entityType   String?                    // 关联实体类型: post, reply, user
  entityId     String?                    // 关联实体ID
  triggerUserId String?                   // 触发通知的用户ID
  isRead       Boolean                    @default(false)
  createdAt    DateTime                   @default(now())
  readAt       DateTime?
  
  user         User                       @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
  triggerUser  User?                      @relation("TriggeredNotifications", fields: [triggerUserId], references: [id], onDelete: SetNull)

  @@map("community_notifications")
  @@schema("hackathon_schema")
}

enum CommunityNotificationType {
  REPLY           // 有人回复了你的帖子
  REPLY_MENTION   // 有人在回复中提到了你
  POST_LIKE       // 有人点赞了你的帖子
  REPLY_LIKE      // 有人点赞了你的回复
  NEW_FOLLOWER    // 有新的粉丝关注了你
  FOLLOWER_POST   // 你关注的人发布了新帖子
  SYSTEM_ANNOUNCEMENT // 系统公告
  WELCOME         // 欢迎消息

  @@schema("hackathon_schema")
}

model DAOProposal {
  id               String            @id @default(cuid())
  title            String
  description      String
  proposalType     DAOProposalType
  targetAmount     Decimal?          @db.Decimal(15, 2)
  executionTime    DateTime
  status           DAOProposalStatus @default(ACTIVE)
  forVotes         Int               @default(0)
  againstVotes     Int               @default(0)
  abstainVotes     Int               @default(0)
  totalVotingPower Decimal           @default(0) @db.Decimal(15, 2)
  minVotingPower   Decimal?          @db.Decimal(15, 2) // 最低投票权要求
  quorum           Int               @default(20)       // 法定投票人数比例(%)
  votingDeadline   DateTime                             // 投票截止时间
  executionDelay   Int               @default(24)       // 执行延迟（小时）
  proposalCategory String            @default("general") // general, technical, economic, governance
  priority         String            @default("normal")  // low, normal, high, critical
  creatorId        String
  ipfsHash         String?
  metadata         Json?
  isExecuted       Boolean           @default(false)
  executedAt       DateTime?
  executedBy       String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  creator          User              @relation("DAOProposalCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  votes            DAOVote[]
  multiSigProposal MultiSigProposal?

  @@map("dao_proposals")
  @@schema("hackathon_schema")
}

model DAOVote {
  id           String      @id @default(cuid())
  proposalId   String
  userId       String
  vote         String      // for, against, abstain
  votingPower  Decimal     @db.Decimal(15, 2)
  delegatedBy  String?     // 如果是委托投票，记录委托人ID
  reason       String?     // 投票理由
  ipfsHash     String?
  blockNumber  BigInt?     // 投票时的区块高度
  txHash       String?     // 链上投票交易哈希
  isValid      Boolean     @default(true)
  createdAt    DateTime    @default(now())
  proposal     DAOProposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([proposalId, userId])
  @@map("dao_votes")
  @@schema("hackathon_schema")
}

model NFT {
  id          String   @id @default(cuid())
  tokenId     Int      @unique
  name        String
  description String
  imageUrl    String
  category    String
  metadata    Json?
  ownerId     String
  ipfsHash    String?
  mintTime    DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  owner       User     @relation("NFTOwner", fields: [ownerId], references: [id], onDelete: Cascade)

  @@map("nfts")
  @@schema("hackathon_schema")
}

model Staking {
  id              String               @id @default(cuid())
  userId          String               @unique
  stakedAmount    Decimal              @default(0) @db.Decimal(15, 2)
  rewards         Decimal              @default(0) @db.Decimal(15, 2)
  apy             Decimal              @default(12.5) @db.Decimal(5, 2)
  lockPeriod      Int                  @default(30)     // 锁定天数
  lockUntil       DateTime?                             // 锁定到期时间
  boostMultiplier Decimal              @default(1.0) @db.Decimal(3, 2) // 加成倍数
  penaltyRate     Decimal              @default(0.1) @db.Decimal(3, 2) // 提前解锁惩罚率
  stakingTier     StakingTier          @default(BRONZE)
  autoCompound    Boolean              @default(true)    // 自动复投
  lastRewardTime  DateTime             @default(now())
  stakingStarted  DateTime             @default(now())
  isLocked        Boolean              @default(false)
  emergencyUnlock Boolean              @default(false)   // 紧急解锁标志
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  user            User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions    StakingTransaction[]

  @@map("staking")
  @@schema("hackathon_schema")
}

model StakingTransaction {
  id          String                    @id @default(cuid())
  stakingId   String
  userId      String
  type        StakingTransactionType
  amount      Decimal                   @db.Decimal(15, 2)
  fee         Decimal                   @default(0) @db.Decimal(15, 2) // 交易手续费
  penalty     Decimal                   @default(0) @db.Decimal(15, 2) // 提前解锁惩罚
  txHash      String?
  blockNumber BigInt?
  gasUsed     BigInt?
  status      StakingTransactionStatus @default(PENDING)
  reason      String?                   // 交易原因或失败原因
  createdAt   DateTime                  @default(now())
  confirmedAt DateTime?
  staking     Staking                   @relation(fields: [stakingId], references: [id], onDelete: Cascade)
  user        User                      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, type])
  @@index([status, createdAt])
  @@map("staking_transactions")
  @@schema("hackathon_schema")
}

// 多重签名提案模型
model MultiSigProposal {
  id             String      @id @default(cuid())
  proposalId     String      @unique
  requiredSigs   Int         @default(3)       // 需要的签名数量
  currentSigs    Int         @default(0)       // 当前签名数量
  timelock       DateTime                      // 时间锁
  executed       Boolean     @default(false)   // 是否已执行
  signers        Json        @default("[]")    // 签名者地址列表
  signatures     Json        @default("[]")    // 已收集的签名
  threshold      Decimal     @db.Decimal(5, 2) // 签名阈值百分比
  isEmergency    Boolean     @default(false)   // 是否紧急提案
  emergencyDelay Int         @default(6)       // 紧急提案延迟时间（小时）
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  proposal       DAOProposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)

  @@map("multisig_proposals")
  @@schema("hackathon_schema")
}

// 声誉积分记录模型
model ReputationRecord {
  id           String    @id @default(cuid())
  userId       String
  action       String    // submit_project, vote, judge, organize, participate等
  points       Int       // 获得积分
  multiplier   Decimal   @default(1.0) @db.Decimal(3, 2) // 质押加成倍数
  hackathonId  String?
  projectId    String?
  description  String?   // 行为描述
  category     String    @default("general") // general, technical, community, governance
  season       String?   // 积分赛季
  isValid      Boolean   @default(true)
  createdAt    DateTime  @default(now())
  user         User      @relation("UserReputation", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, season])
  @@index([action, createdAt])
  @@map("reputation_records")
  @@schema("hackathon_schema")
}

// 零知识证明投票模型
model PrivateVote {
  id             String   @id @default(cuid())
  proposalId     String
  commitHash     String   // 投票承诺哈希
  nullifierHash  String   @unique // 防止双重投票的nullifier
  proof          Json     // ZK证明数据
  publicSignals  Json     // 公开信号
  votingPower    Decimal  @db.Decimal(15, 2)
  isVerified     Boolean  @default(false)
  verifiedAt     DateTime?
  createdAt      DateTime @default(now())

  @@index([proposalId, nullifierHash])
  @@map("private_votes")
  @@schema("hackathon_schema")
}

// 跨链支持配置模型
model CrossChainSupport {
  id                  String   @id @default(cuid())
  chainId             Int      @unique
  chainName           String
  rpcUrl              String
  explorerUrl         String?
  contractAddress     String
  isActive            Boolean  @default(true)
  gasPriceMultiplier  Decimal  @default(1.0) @db.Decimal(3, 2)
  blockTime           Int      @default(3)     // 平均出块时间（秒）
  confirmations       Int      @default(12)    // 确认块数
  nativeToken         String   // 原生代币符号
  decimals            Int      @default(18)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@map("crosschain_support")
  @@schema("hackathon_schema")
}

// DID去中心化身份凭证模型
model DIDCredential {
  id                    String    @id @default(cuid())
  userId                String
  didDocument           Json      // DID文档
  verifiableCredentials Json      @default("[]") // 可验证凭证列表
  issuer                String    // 颁发者DID
  subject               String    // 主体DID
  credentialType        String    // 凭证类型
  expiryDate            DateTime?
  isVerified            Boolean   @default(false)
  verificationMethod    String?   // 验证方法
  proofType             String?   // 证明类型
  proofValue            String?   // 证明值
  revoked               Boolean   @default(false)
  revokedAt             DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation("UserDID", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, credentialType])
  @@index([issuer, isVerified])
  @@map("did_credentials")
  @@schema("hackathon_schema")
}

// 委托投票模型
model VotingDelegation {
  id          String    @id @default(cuid())
  delegatorId String    // 委托人
  delegateeId String    // 被委托人
  scope       String    @default("all") // all, category, specific
  category    String?   // 委托范围的具体分类
  validUntil  DateTime? // 委托有效期
  isActive    Boolean   @default(true)
  votingPower Decimal   @db.Decimal(15, 2) // 委托的投票权
  autoRenew   Boolean   @default(false)     // 是否自动续期
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  delegator   User      @relation("Delegator", fields: [delegatorId], references: [id], onDelete: Cascade)
  delegatee   User      @relation("Delegatee", fields: [delegateeId], references: [id], onDelete: Cascade)

  @@unique([delegatorId, delegateeId, scope])
  @@index([delegateeId, isActive])
  @@map("voting_delegations")
  @@schema("hackathon_schema")
}

// 社区激励模型
model CommunityIncentive {
  id           String   @id @default(cuid())
  userId       String
  actionType   String   // project_submit, vote_cast, judge_review, community_post等
  rewardAmount Decimal  @db.Decimal(15, 2)
  tokenType    String   @default("HACKX") // 代币类型
  multiplier   Decimal  @default(1.0) @db.Decimal(3, 2) // 激励倍数
  distributed  Boolean  @default(false)
  distributedAt DateTime?
  txHash       String?  // 分发交易哈希
  reason       String?  // 激励原因
  season       String?  // 激励季度
  isValid      Boolean  @default(true)
  createdAt    DateTime @default(now())
  user         User     @relation("IncentiveUser", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, distributed])
  @@index([actionType, season])
  @@map("community_incentives")
  @@schema("hackathon_schema")
}
