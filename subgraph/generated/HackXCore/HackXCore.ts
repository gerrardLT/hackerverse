// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class HackathonCreated extends ethereum.Event {
  get params(): HackathonCreated__Params {
    return new HackathonCreated__Params(this);
  }
}

export class HackathonCreated__Params {
  _event: HackathonCreated;

  constructor(event: HackathonCreated) {
    this._event = event;
  }

  get hackathonId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get organizer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get dataCID(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class HackathonUpdated extends ethereum.Event {
  get params(): HackathonUpdated__Params {
    return new HackathonUpdated__Params(this);
  }
}

export class HackathonUpdated__Params {
  _event: HackathonUpdated;

  constructor(event: HackathonUpdated) {
    this._event = event;
  }

  get hackathonId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newDataCID(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ProfileUpdated extends ethereum.Event {
  get params(): ProfileUpdated__Params {
    return new ProfileUpdated__Params(this);
  }
}

export class ProfileUpdated__Params {
  _event: ProfileUpdated;

  constructor(event: ProfileUpdated) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newProfileCID(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class ProjectSubmitted extends ethereum.Event {
  get params(): ProjectSubmitted__Params {
    return new ProjectSubmitted__Params(this);
  }
}

export class ProjectSubmitted__Params {
  _event: ProjectSubmitted;

  constructor(event: ProjectSubmitted) {
    this._event = event;
  }

  get hackathonId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get participant(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get projectCID(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class ProjectUpdated extends ethereum.Event {
  get params(): ProjectUpdated__Params {
    return new ProjectUpdated__Params(this);
  }
}

export class ProjectUpdated__Params {
  _event: ProjectUpdated;

  constructor(event: ProjectUpdated) {
    this._event = event;
  }

  get projectId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newDataCID(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class ScoreSubmitted extends ethereum.Event {
  get params(): ScoreSubmitted__Params {
    return new ScoreSubmitted__Params(this);
  }
}

export class ScoreSubmitted__Params {
  _event: ScoreSubmitted;

  constructor(event: ScoreSubmitted) {
    this._event = event;
  }

  get projectId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get judge(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get score(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UserJoinedHackathon extends ethereum.Event {
  get params(): UserJoinedHackathon__Params {
    return new UserJoinedHackathon__Params(this);
  }
}

export class UserJoinedHackathon__Params {
  _event: UserJoinedHackathon;

  constructor(event: UserJoinedHackathon) {
    this._event = event;
  }

  get hackathonId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get participant(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class UserLeftHackathon extends ethereum.Event {
  get params(): UserLeftHackathon__Params {
    return new UserLeftHackathon__Params(this);
  }
}

export class UserLeftHackathon__Params {
  _event: UserLeftHackathon;

  constructor(event: UserLeftHackathon) {
    this._event = event;
  }

  get hackathonId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get participant(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class UserRegistered extends ethereum.Event {
  get params(): UserRegistered__Params {
    return new UserRegistered__Params(this);
  }
}

export class UserRegistered__Params {
  _event: UserRegistered;

  constructor(event: UserRegistered) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get profileCID(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class HackXCore extends ethereum.SmartContract {
  static bind(address: Address): HackXCore {
    return new HackXCore("HackXCore", address);
  }

  createHackathon(hackathonDataCID: string): BigInt {
    let result = super.call(
      "createHackathon",
      "createHackathon(string):(uint256)",
      [ethereum.Value.fromString(hackathonDataCID)]
    );

    return result[0].toBigInt();
  }

  try_createHackathon(hackathonDataCID: string): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createHackathon",
      "createHackathon(string):(uint256)",
      [ethereum.Value.fromString(hackathonDataCID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getHackathonCount(): BigInt {
    let result = super.call(
      "getHackathonCount",
      "getHackathonCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getHackathonCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getHackathonCount",
      "getHackathonCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getHackathonData(hackathonId: BigInt): string {
    let result = super.call(
      "getHackathonData",
      "getHackathonData(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(hackathonId)]
    );

    return result[0].toString();
  }

  try_getHackathonData(hackathonId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall(
      "getHackathonData",
      "getHackathonData(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(hackathonId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getHackathonParticipants(hackathonId: BigInt): Array<Address> {
    let result = super.call(
      "getHackathonParticipants",
      "getHackathonParticipants(uint256):(address[])",
      [ethereum.Value.fromUnsignedBigInt(hackathonId)]
    );

    return result[0].toAddressArray();
  }

  try_getHackathonParticipants(
    hackathonId: BigInt
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getHackathonParticipants",
      "getHackathonParticipants(uint256):(address[])",
      [ethereum.Value.fromUnsignedBigInt(hackathonId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getProjectCount(): BigInt {
    let result = super.call(
      "getProjectCount",
      "getProjectCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getProjectCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getProjectCount",
      "getProjectCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getProjectData(projectId: BigInt): string {
    let result = super.call(
      "getProjectData",
      "getProjectData(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(projectId)]
    );

    return result[0].toString();
  }

  try_getProjectData(projectId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall(
      "getProjectData",
      "getProjectData(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(projectId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getProjectScore(projectId: BigInt, judge: Address): BigInt {
    let result = super.call(
      "getProjectScore",
      "getProjectScore(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(projectId),
        ethereum.Value.fromAddress(judge)
      ]
    );

    return result[0].toBigInt();
  }

  try_getProjectScore(
    projectId: BigInt,
    judge: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getProjectScore",
      "getProjectScore(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(projectId),
        ethereum.Value.fromAddress(judge)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getProjectSubmission(hackathonId: BigInt, participant: Address): string {
    let result = super.call(
      "getProjectSubmission",
      "getProjectSubmission(uint256,address):(string)",
      [
        ethereum.Value.fromUnsignedBigInt(hackathonId),
        ethereum.Value.fromAddress(participant)
      ]
    );

    return result[0].toString();
  }

  try_getProjectSubmission(
    hackathonId: BigInt,
    participant: Address
  ): ethereum.CallResult<string> {
    let result = super.tryCall(
      "getProjectSubmission",
      "getProjectSubmission(uint256,address):(string)",
      [
        ethereum.Value.fromUnsignedBigInt(hackathonId),
        ethereum.Value.fromAddress(participant)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getUserHackathons(user: Address): Array<BigInt> {
    let result = super.call(
      "getUserHackathons",
      "getUserHackathons(address):(uint256[])",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toBigIntArray();
  }

  try_getUserHackathons(user: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getUserHackathons",
      "getUserHackathons(address):(uint256[])",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getUserProfile(user: Address): string {
    let result = super.call(
      "getUserProfile",
      "getUserProfile(address):(string)",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toString();
  }

  try_getUserProfile(user: Address): ethereum.CallResult<string> {
    let result = super.tryCall(
      "getUserProfile",
      "getUserProfile(address):(string)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  hackathonData(param0: BigInt): string {
    let result = super.call(
      "hackathonData",
      "hackathonData(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toString();
  }

  try_hackathonData(param0: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall(
      "hackathonData",
      "hackathonData(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  hackathonOrganizers(param0: BigInt): Address {
    let result = super.call(
      "hackathonOrganizers",
      "hackathonOrganizers(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_hackathonOrganizers(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "hackathonOrganizers",
      "hackathonOrganizers(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  hackathonParticipants(param0: BigInt, param1: BigInt): Address {
    let result = super.call(
      "hackathonParticipants",
      "hackathonParticipants(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toAddress();
  }

  try_hackathonParticipants(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "hackathonParticipants",
      "hackathonParticipants(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isUserRegistered(param0: Address): boolean {
    let result = super.call(
      "isUserRegistered",
      "isUserRegistered(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_isUserRegistered(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isUserRegistered",
      "isUserRegistered(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  projectCreators(param0: BigInt): Address {
    let result = super.call(
      "projectCreators",
      "projectCreators(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_projectCreators(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "projectCreators",
      "projectCreators(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  projectData(param0: BigInt): string {
    let result = super.call("projectData", "projectData(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toString();
  }

  try_projectData(param0: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("projectData", "projectData(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  projectJudges(param0: BigInt, param1: BigInt): Address {
    let result = super.call(
      "projectJudges",
      "projectJudges(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toAddress();
  }

  try_projectJudges(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "projectJudges",
      "projectJudges(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  projectScores(param0: BigInt, param1: Address): BigInt {
    let result = super.call(
      "projectScores",
      "projectScores(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_projectScores(
    param0: BigInt,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "projectScores",
      "projectScores(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  projectSubmissions(param0: BigInt, param1: Address): string {
    let result = super.call(
      "projectSubmissions",
      "projectSubmissions(uint256,address):(string)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return result[0].toString();
  }

  try_projectSubmissions(
    param0: BigInt,
    param1: Address
  ): ethereum.CallResult<string> {
    let result = super.tryCall(
      "projectSubmissions",
      "projectSubmissions(uint256,address):(string)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  submitProject(hackathonId: BigInt, projectCID: string): BigInt {
    let result = super.call(
      "submitProject",
      "submitProject(uint256,string):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(hackathonId),
        ethereum.Value.fromString(projectCID)
      ]
    );

    return result[0].toBigInt();
  }

  try_submitProject(
    hackathonId: BigInt,
    projectCID: string
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "submitProject",
      "submitProject(uint256,string):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(hackathonId),
        ethereum.Value.fromString(projectCID)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userHackathons(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "userHackathons",
      "userHackathons(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_userHackathons(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userHackathons",
      "userHackathons(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userProfiles(param0: Address): string {
    let result = super.call("userProfiles", "userProfiles(address):(string)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toString();
  }

  try_userProfiles(param0: Address): ethereum.CallResult<string> {
    let result = super.tryCall(
      "userProfiles",
      "userProfiles(address):(string)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateHackathonCall extends ethereum.Call {
  get inputs(): CreateHackathonCall__Inputs {
    return new CreateHackathonCall__Inputs(this);
  }

  get outputs(): CreateHackathonCall__Outputs {
    return new CreateHackathonCall__Outputs(this);
  }
}

export class CreateHackathonCall__Inputs {
  _call: CreateHackathonCall;

  constructor(call: CreateHackathonCall) {
    this._call = call;
  }

  get hackathonDataCID(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class CreateHackathonCall__Outputs {
  _call: CreateHackathonCall;

  constructor(call: CreateHackathonCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class JoinHackathonCall extends ethereum.Call {
  get inputs(): JoinHackathonCall__Inputs {
    return new JoinHackathonCall__Inputs(this);
  }

  get outputs(): JoinHackathonCall__Outputs {
    return new JoinHackathonCall__Outputs(this);
  }
}

export class JoinHackathonCall__Inputs {
  _call: JoinHackathonCall;

  constructor(call: JoinHackathonCall) {
    this._call = call;
  }

  get hackathonId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class JoinHackathonCall__Outputs {
  _call: JoinHackathonCall;

  constructor(call: JoinHackathonCall) {
    this._call = call;
  }
}

export class LeaveHackathonCall extends ethereum.Call {
  get inputs(): LeaveHackathonCall__Inputs {
    return new LeaveHackathonCall__Inputs(this);
  }

  get outputs(): LeaveHackathonCall__Outputs {
    return new LeaveHackathonCall__Outputs(this);
  }
}

export class LeaveHackathonCall__Inputs {
  _call: LeaveHackathonCall;

  constructor(call: LeaveHackathonCall) {
    this._call = call;
  }

  get hackathonId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class LeaveHackathonCall__Outputs {
  _call: LeaveHackathonCall;

  constructor(call: LeaveHackathonCall) {
    this._call = call;
  }
}

export class RegisterUserCall extends ethereum.Call {
  get inputs(): RegisterUserCall__Inputs {
    return new RegisterUserCall__Inputs(this);
  }

  get outputs(): RegisterUserCall__Outputs {
    return new RegisterUserCall__Outputs(this);
  }
}

export class RegisterUserCall__Inputs {
  _call: RegisterUserCall;

  constructor(call: RegisterUserCall) {
    this._call = call;
  }

  get profileCID(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class RegisterUserCall__Outputs {
  _call: RegisterUserCall;

  constructor(call: RegisterUserCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SubmitProjectCall extends ethereum.Call {
  get inputs(): SubmitProjectCall__Inputs {
    return new SubmitProjectCall__Inputs(this);
  }

  get outputs(): SubmitProjectCall__Outputs {
    return new SubmitProjectCall__Outputs(this);
  }
}

export class SubmitProjectCall__Inputs {
  _call: SubmitProjectCall;

  constructor(call: SubmitProjectCall) {
    this._call = call;
  }

  get hackathonId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get projectCID(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class SubmitProjectCall__Outputs {
  _call: SubmitProjectCall;

  constructor(call: SubmitProjectCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SubmitScoreCall extends ethereum.Call {
  get inputs(): SubmitScoreCall__Inputs {
    return new SubmitScoreCall__Inputs(this);
  }

  get outputs(): SubmitScoreCall__Outputs {
    return new SubmitScoreCall__Outputs(this);
  }
}

export class SubmitScoreCall__Inputs {
  _call: SubmitScoreCall;

  constructor(call: SubmitScoreCall) {
    this._call = call;
  }

  get projectId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get judge(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get score(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SubmitScoreCall__Outputs {
  _call: SubmitScoreCall;

  constructor(call: SubmitScoreCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateHackathonCall extends ethereum.Call {
  get inputs(): UpdateHackathonCall__Inputs {
    return new UpdateHackathonCall__Inputs(this);
  }

  get outputs(): UpdateHackathonCall__Outputs {
    return new UpdateHackathonCall__Outputs(this);
  }
}

export class UpdateHackathonCall__Inputs {
  _call: UpdateHackathonCall;

  constructor(call: UpdateHackathonCall) {
    this._call = call;
  }

  get hackathonId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newDataCID(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class UpdateHackathonCall__Outputs {
  _call: UpdateHackathonCall;

  constructor(call: UpdateHackathonCall) {
    this._call = call;
  }
}

export class UpdateProjectCall extends ethereum.Call {
  get inputs(): UpdateProjectCall__Inputs {
    return new UpdateProjectCall__Inputs(this);
  }

  get outputs(): UpdateProjectCall__Outputs {
    return new UpdateProjectCall__Outputs(this);
  }
}

export class UpdateProjectCall__Inputs {
  _call: UpdateProjectCall;

  constructor(call: UpdateProjectCall) {
    this._call = call;
  }

  get projectId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newDataCID(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class UpdateProjectCall__Outputs {
  _call: UpdateProjectCall;

  constructor(call: UpdateProjectCall) {
    this._call = call;
  }
}

export class UpdateUserProfileCall extends ethereum.Call {
  get inputs(): UpdateUserProfileCall__Inputs {
    return new UpdateUserProfileCall__Inputs(this);
  }

  get outputs(): UpdateUserProfileCall__Outputs {
    return new UpdateUserProfileCall__Outputs(this);
  }
}

export class UpdateUserProfileCall__Inputs {
  _call: UpdateUserProfileCall;

  constructor(call: UpdateUserProfileCall) {
    this._call = call;
  }

  get newProfileCID(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class UpdateUserProfileCall__Outputs {
  _call: UpdateUserProfileCall;

  constructor(call: UpdateUserProfileCall) {
    this._call = call;
  }
}
