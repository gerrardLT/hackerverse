// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type User must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("User", id.toString(), this);
    }
  }

  static loadInBlock(id: string): User | null {
    return changetype<User | null>(store.get_in_block("User", id));
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get profileCID(): string {
    let value = this.get("profileCID");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set profileCID(value: string) {
    this.set("profileCID", Value.fromString(value));
  }

  get profileData(): string | null {
    let value = this.get("profileData");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set profileData(value: string | null) {
    if (!value) {
      this.unset("profileData");
    } else {
      this.set("profileData", Value.fromString(<string>value));
    }
  }

  get hackathons(): HackathonParticipantLoader {
    return new HackathonParticipantLoader(
      "User",
      this.get("id")!.toString(),
      "hackathons"
    );
  }

  get projects(): ProjectLoader {
    return new ProjectLoader("User", this.get("id")!.toString(), "projects");
  }

  get scores(): ScoreLoader {
    return new ScoreLoader("User", this.get("id")!.toString(), "scores");
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get updatedAt(): BigInt {
    let value = this.get("updatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set updatedAt(value: BigInt) {
    this.set("updatedAt", Value.fromBigInt(value));
  }
}

export class UserProfile extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserProfile entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UserProfile must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UserProfile", id.toString(), this);
    }
  }

  static loadInBlock(id: string): UserProfile | null {
    return changetype<UserProfile | null>(
      store.get_in_block("UserProfile", id)
    );
  }

  static load(id: string): UserProfile | null {
    return changetype<UserProfile | null>(store.get("UserProfile", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get username(): string {
    let value = this.get("username");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set username(value: string) {
    this.set("username", Value.fromString(value));
  }

  get email(): string {
    let value = this.get("email");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set email(value: string) {
    this.set("email", Value.fromString(value));
  }

  get avatar(): string | null {
    let value = this.get("avatar");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set avatar(value: string | null) {
    if (!value) {
      this.unset("avatar");
    } else {
      this.set("avatar", Value.fromString(<string>value));
    }
  }

  get bio(): string | null {
    let value = this.get("bio");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set bio(value: string | null) {
    if (!value) {
      this.unset("bio");
    } else {
      this.set("bio", Value.fromString(<string>value));
    }
  }

  get skills(): Array<string> {
    let value = this.get("skills");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set skills(value: Array<string>) {
    this.set("skills", Value.fromStringArray(value));
  }

  get socialLinks(): Array<string> {
    let value = this.get("socialLinks");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set socialLinks(value: Array<string>) {
    this.set("socialLinks", Value.fromStringArray(value));
  }

  get version(): string {
    let value = this.get("version");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set version(value: string) {
    this.set("version", Value.fromString(value));
  }

  get timestamp(): string {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set timestamp(value: string) {
    this.set("timestamp", Value.fromString(value));
  }
}

export class SocialLink extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SocialLink entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SocialLink must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SocialLink", id.toString(), this);
    }
  }

  static loadInBlock(id: string): SocialLink | null {
    return changetype<SocialLink | null>(store.get_in_block("SocialLink", id));
  }

  static load(id: string): SocialLink | null {
    return changetype<SocialLink | null>(store.get("SocialLink", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get platform(): string {
    let value = this.get("platform");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set platform(value: string) {
    this.set("platform", Value.fromString(value));
  }

  get url(): string {
    let value = this.get("url");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set url(value: string) {
    this.set("url", Value.fromString(value));
  }

  get userProfile(): string {
    let value = this.get("userProfile");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set userProfile(value: string) {
    this.set("userProfile", Value.fromString(value));
  }
}

export class Hackathon extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Hackathon entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Hackathon must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Hackathon", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Hackathon | null {
    return changetype<Hackathon | null>(store.get_in_block("Hackathon", id));
  }

  static load(id: string): Hackathon | null {
    return changetype<Hackathon | null>(store.get("Hackathon", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get hackathonId(): BigInt {
    let value = this.get("hackathonId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set hackathonId(value: BigInt) {
    this.set("hackathonId", Value.fromBigInt(value));
  }

  get organizer(): string {
    let value = this.get("organizer");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set organizer(value: string) {
    this.set("organizer", Value.fromString(value));
  }

  get dataCID(): string {
    let value = this.get("dataCID");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set dataCID(value: string) {
    this.set("dataCID", Value.fromString(value));
  }

  get hackathonData(): string | null {
    let value = this.get("hackathonData");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set hackathonData(value: string | null) {
    if (!value) {
      this.unset("hackathonData");
    } else {
      this.set("hackathonData", Value.fromString(<string>value));
    }
  }

  get participants(): HackathonParticipantLoader {
    return new HackathonParticipantLoader(
      "Hackathon",
      this.get("id")!.toString(),
      "participants"
    );
  }

  get projects(): ProjectLoader {
    return new ProjectLoader(
      "Hackathon",
      this.get("id")!.toString(),
      "projects"
    );
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get updatedAt(): BigInt {
    let value = this.get("updatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set updatedAt(value: BigInt) {
    this.set("updatedAt", Value.fromBigInt(value));
  }
}

export class HackathonData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save HackathonData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type HackathonData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("HackathonData", id.toString(), this);
    }
  }

  static loadInBlock(id: string): HackathonData | null {
    return changetype<HackathonData | null>(
      store.get_in_block("HackathonData", id)
    );
  }

  static load(id: string): HackathonData | null {
    return changetype<HackathonData | null>(store.get("HackathonData", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get hackathon(): string {
    let value = this.get("hackathon");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set hackathon(value: string) {
    this.set("hackathon", Value.fromString(value));
  }

  get title(): string {
    let value = this.get("title");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set title(value: string) {
    this.set("title", Value.fromString(value));
  }

  get description(): string {
    let value = this.get("description");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get startDate(): string {
    let value = this.get("startDate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set startDate(value: string) {
    this.set("startDate", Value.fromString(value));
  }

  get endDate(): string {
    let value = this.get("endDate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endDate(value: string) {
    this.set("endDate", Value.fromString(value));
  }

  get prizePool(): BigInt {
    let value = this.get("prizePool");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set prizePool(value: BigInt) {
    this.set("prizePool", Value.fromBigInt(value));
  }

  get categories(): Array<string> {
    let value = this.get("categories");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set categories(value: Array<string>) {
    this.set("categories", Value.fromStringArray(value));
  }

  get requirements(): string {
    let value = this.get("requirements");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set requirements(value: string) {
    this.set("requirements", Value.fromString(value));
  }

  get rules(): string {
    let value = this.get("rules");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set rules(value: string) {
    this.set("rules", Value.fromString(value));
  }

  get status(): string {
    let value = this.get("status");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get version(): string {
    let value = this.get("version");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set version(value: string) {
    this.set("version", Value.fromString(value));
  }

  get timestamp(): string {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set timestamp(value: string) {
    this.set("timestamp", Value.fromString(value));
  }
}

export class HackathonParticipant extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save HackathonParticipant entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type HackathonParticipant must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("HackathonParticipant", id.toString(), this);
    }
  }

  static loadInBlock(id: string): HackathonParticipant | null {
    return changetype<HackathonParticipant | null>(
      store.get_in_block("HackathonParticipant", id)
    );
  }

  static load(id: string): HackathonParticipant | null {
    return changetype<HackathonParticipant | null>(
      store.get("HackathonParticipant", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get hackathon(): string {
    let value = this.get("hackathon");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set hackathon(value: string) {
    this.set("hackathon", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get joinedAt(): BigInt {
    let value = this.get("joinedAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set joinedAt(value: BigInt) {
    this.set("joinedAt", Value.fromBigInt(value));
  }
}

export class Project extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Project entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Project must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Project", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Project | null {
    return changetype<Project | null>(store.get_in_block("Project", id));
  }

  static load(id: string): Project | null {
    return changetype<Project | null>(store.get("Project", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get projectId(): BigInt {
    let value = this.get("projectId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set projectId(value: BigInt) {
    this.set("projectId", Value.fromBigInt(value));
  }

  get creator(): string {
    let value = this.get("creator");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set creator(value: string) {
    this.set("creator", Value.fromString(value));
  }

  get hackathon(): string {
    let value = this.get("hackathon");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set hackathon(value: string) {
    this.set("hackathon", Value.fromString(value));
  }

  get dataCID(): string {
    let value = this.get("dataCID");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set dataCID(value: string) {
    this.set("dataCID", Value.fromString(value));
  }

  get projectData(): string | null {
    let value = this.get("projectData");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set projectData(value: string | null) {
    if (!value) {
      this.unset("projectData");
    } else {
      this.set("projectData", Value.fromString(<string>value));
    }
  }

  get scores(): ScoreLoader {
    return new ScoreLoader("Project", this.get("id")!.toString(), "scores");
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get updatedAt(): BigInt {
    let value = this.get("updatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set updatedAt(value: BigInt) {
    this.set("updatedAt", Value.fromBigInt(value));
  }
}

export class ProjectData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ProjectData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ProjectData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ProjectData", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ProjectData | null {
    return changetype<ProjectData | null>(
      store.get_in_block("ProjectData", id)
    );
  }

  static load(id: string): ProjectData | null {
    return changetype<ProjectData | null>(store.get("ProjectData", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get project(): string {
    let value = this.get("project");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set project(value: string) {
    this.set("project", Value.fromString(value));
  }

  get title(): string {
    let value = this.get("title");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set title(value: string) {
    this.set("title", Value.fromString(value));
  }

  get description(): string {
    let value = this.get("description");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get demoUrl(): string | null {
    let value = this.get("demoUrl");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set demoUrl(value: string | null) {
    if (!value) {
      this.unset("demoUrl");
    } else {
      this.set("demoUrl", Value.fromString(<string>value));
    }
  }

  get githubUrl(): string | null {
    let value = this.get("githubUrl");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set githubUrl(value: string | null) {
    if (!value) {
      this.unset("githubUrl");
    } else {
      this.set("githubUrl", Value.fromString(<string>value));
    }
  }

  get techStack(): Array<string> {
    let value = this.get("techStack");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set techStack(value: Array<string>) {
    this.set("techStack", Value.fromStringArray(value));
  }

  get teamMembers(): Array<string> {
    let value = this.get("teamMembers");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set teamMembers(value: Array<string>) {
    this.set("teamMembers", Value.fromStringArray(value));
  }

  get screenshots(): Array<string> {
    let value = this.get("screenshots");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set screenshots(value: Array<string>) {
    this.set("screenshots", Value.fromStringArray(value));
  }

  get version(): string {
    let value = this.get("version");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set version(value: string) {
    this.set("version", Value.fromString(value));
  }

  get timestamp(): string {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set timestamp(value: string) {
    this.set("timestamp", Value.fromString(value));
  }
}

export class Score extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Score entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Score must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Score", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Score | null {
    return changetype<Score | null>(store.get_in_block("Score", id));
  }

  static load(id: string): Score | null {
    return changetype<Score | null>(store.get("Score", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get project(): string {
    let value = this.get("project");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set project(value: string) {
    this.set("project", Value.fromString(value));
  }

  get judge(): string {
    let value = this.get("judge");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set judge(value: string) {
    this.set("judge", Value.fromString(value));
  }

  get score(): BigInt {
    let value = this.get("score");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set score(value: BigInt) {
    this.set("score", Value.fromBigInt(value));
  }

  get submittedAt(): BigInt {
    let value = this.get("submittedAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set submittedAt(value: BigInt) {
    this.set("submittedAt", Value.fromBigInt(value));
  }
}

export class HackathonParticipantLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): HackathonParticipant[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<HackathonParticipant[]>(value);
  }
}

export class ProjectLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Project[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Project[]>(value);
  }
}

export class ScoreLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Score[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Score[]>(value);
  }
}
